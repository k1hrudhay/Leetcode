###############   Problem ##################

'''

Given a non-empty, singly linked list with head node head, return a middle node of linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:

Input: [1,2,3,4,5]
Output: Node 3 from this list (Serialization: [3,4,5])
The returned node has value 3.  (The judge's serialization of this node is [3,4,5]).
Note that we returned a ListNode object ans, such that:
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.
Example 2:

Input: [1,2,3,4,5,6]
Output: Node 4 from this list (Serialization: [4,5,6])
Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Note:

The number of nodes in the given list will be between 1 and 100.

'''

#################  Solution ####################

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
from math import ceil
class Solution:
    def middleNode(self, head: ListNode) -> ListNode:
        
        cnt = 0
        curr = head
        while curr:
            cnt+=1
            curr = curr.next

        
        if (cnt-1)%2 == 0:
            mid = int((cnt-1)/2)
        else:
            mid = int((cnt-1)//2 + 1)

        
        curr = head
        for i in range(mid):
            curr=curr.next
        
        return curr
        
        
        
        ##########################
#         self.cnt = 0
#         self.traverse_count(head)
#         mid = int((self.cnt-1)//2) if (self.cnt-1)%2 == 0 else int((self.cnt-1)//2+1)
#         self.node=0
#         self.traverse(head,mid,0)
#         return self.node
        
        
#     def traverse_count(self,node):
#         if node:
#             self.cnt +=1
#             self.traverse_count(node.next)
            
#     def traverse(self,node,mid,pos):
#         if node:
#             if pos == mid:
#                 self.node = node
#                 return False
#             else:
#                 self.traverse(node.next,mid,pos+1)
