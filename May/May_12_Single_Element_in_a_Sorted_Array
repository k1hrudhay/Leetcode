
##########  Problem ###################

'''
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
 

Note: Your solution should run in O(log n) time and O(1) space.
'''

################   Solution ###################

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        # temp = [i for i in nums if nums.count(i) == 1]
        # return temp[0]
        
        f = 0
        l = len(nums)-1
        while(f < l):
            m = f + (l-f)//2
            if m%2 == 0 and nums[m] == nums[m+1] or m%2 != 0 and nums[m] == nums[m-1]:
                f = m + 1
            # elif m%2 == 0 and nums[m] != nums[m+1] or m%2 != 0 and nums[m] != nums[m-1]:
            else:
                l = m
            
                
        return nums[l]
