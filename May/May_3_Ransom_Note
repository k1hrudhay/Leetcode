########## Problem ################

# Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

# Each letter in the magazine string can only be used once in your ransom note.

 

# Example 1:

# Input: ransomNote = "a", magazine = "b"
# Output: false
# Example 2:

# Input: ransomNote = "aa", magazine = "ab"
# Output: false
# Example 3:

# Input: ransomNote = "aa", magazine = "aab"
# Output: true
 

# Constraints:

# You may assume that both strings contain only lowercase letters.

######################## Solution ######################


class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        temp=0
        if ransomNote=="" and magazine=="" :
          return(True)
        elif ransomNote=="" and magazine is not None:
          return(True)
        else:
          rn = dict(Counter(ransomNote))
          m = dict(Counter(magazine))
          for i in list(rn.keys()):
            if i not in list(m.keys()):
              temp=1
              break
            else:
              if rn[i] > m[i]:
                temp=1
                break
        if temp == 1:
          return(False)
        else:
          return(True)




###############################################################
# from collections import Counter
# # When a collection of items is passed as parameter to Counter, it will create a dictionary with key being the item of the collection and value being the count of occurance of the item in the collection.
# temp=0
# if ransomNote=="" and magazine=="" :
#   return(True)
# elif ransomNote=="" and magazine is not None:
#   return(True)
# else:
#   rn = dict(Counter(ransomNote))
#   m = dict(Counter(magazine))
#   for i in list(rn.keys()):
# 	if i not in list(m.keys()):
# 	# if element in ransomNote is not present in magazine, then the note cannot be formed from the magazine
# 	  temp=1
# 	  break
# 	else:
# 	  if rn[i] > m[i]:
# 	  # if count of the element in ransomNote is greater than that in magazine, then the note cannot be formed from the magazine
# 		temp=1
# 		break
# if temp == 1:
#   return(False)
# else:
#   return(True)
