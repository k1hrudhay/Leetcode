########################### Problem #####################################
# Given a positive integer num, output its complement number. The complement strategy is to flip the bits of its binary representation.

 

# Example 1:

# Input: num = 5
# Output: 2
# Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
# Example 2:

# Input: num = 1
# Output: 0
# Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.
 

# Constraints:

# The given integer num is guaranteed to fit within the range of a 32-bit signed integer.
# num >= 1
# You could assume no leading zero bit in the integerâ€™s binary representation.
# This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/

############################# Solution ###################################

class Solution:
    def findComplement(self, num: int) -> int:
        a=num
        b=[]
        while(a>=1):
            b.append(a%2)
            a=a//2
        b=b[::-1]

        for i in range(len(b)):
            if b[i]==1:
                b[i]=0
            else:
                b[i]=1


        l = len(b)-1

        for i in range(l,-1,-1):
            b[i]=b[i]*pow(2,l-i)
            
        return(sum(b))
    
    
"""

b=bin(nums)[2:]
b=[1 if i=='0' else 0 for i in b]
res=0
for i,j in enumerate(b):
    if j==1:
        print(pow(2,len(b)-i))
        res=res+pow(2,len(b)-i-1)

"""
