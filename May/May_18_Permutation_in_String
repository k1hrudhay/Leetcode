############  Problem #################

'''
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Note:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].
'''


#################  Solution ###################


class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        str1 = [0]*26
        for i in s1:
            str1[ord(i)-ord('a')]+=1
        str2 = [0]*26
        for i in range(len(s2)):
            str2[ord(s2[i])-ord('a')]+=1
            if i >= len(s1):
                if str2[ord(s2[i-len(s1)])-ord('a')] == 1:
                    str2[ord(s2[i-len(s1)])-ord('a')] = 0
                else:
                    str2[ord(s2[i-len(s1)])-ord('a')] -= 1
            if str2 == str1:
                return True
        return False
